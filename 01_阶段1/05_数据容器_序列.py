"""
序列是指：内容连续、有序，可以使用下标索引的一类数据容器
列表、元素、字符串，均可以视为序列

序列支持切片：从一个序列中取出一个子序列
语法：序列[起始下标：结束下标:步长]
起始下标表示从何处开始，可以留空，留空视为从头开始
结束下标（不包含）表示结束，可以留空，留空视为结尾
步长：表示，依次去元素的间隔
     步长1表示，一个个取元素
     步长2表示，每次跳过1个元素取
     步长n表示，每次跳过n-1个元素取
     步长为负表示，反向取，从后向前取，等同于序列反转了。


注意：切片操作不会影响序列本身，会得到一个新的序列
"""

# 对list进行切片，从1开始，4结束，步长1
my_list = [0, 1, 2, 3, 4, 5, 6]
result1 = my_list[1:4]      # 步长默认是1，所以可以省略不写
print(f"结果1：{result1}")  # 结果1：[1, 2, 3]

# 对tuple进行切片，从头开始，到最后结束，步长1
my_tuple = (0, 1, 2, 3, 4, 5, 6)
result2 = my_tuple[:]     # 起始和结束不写表示从头到尾，步长为1可以省略
print(f"结果2：{result2}")  # 结果2：(0, 1, 2, 3, 4, 5, 6)

# 对str进行切片，从头开始，到最后结束，步长2
my_str = "01234567"
result3 = my_str[::2]
print(f"结果3：{result3}")  # 结果3：0246


# 对str进行切片，从头开始，到最后结束，步长-1
my_str = "01234567"
result4 = my_str[::-1]          # 等同于将序列反转了
print(f"结果4：{result4}")  # 结果4：76543210


# 对列表进行切片，从3开始，到1结束，步长-1
my_list = [0, 1, 2, 3, 4, 5, 6]
result5 = my_list[3:1:-1]
print(f"结果5：{result5}")  # 结果6：(6, 4, 2, 0)


# 对元组进行切片，从头开始，到尾结束，步长-2
my_tuple = (0, 1, 2, 3, 4, 5, 6)
result6 = my_tuple[::-2]
print(f"结果6：{result6}")  # 结果6：(6, 4, 2, 0)

